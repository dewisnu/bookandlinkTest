version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: image-processor-postgres
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: image_processor
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: image-processor-rabbitmq
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  publisher-service:
    build:
      context: ./publisher-service
      dockerfile: Dockerfile
    container_name: image-processor-publisher
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=image_processor
      - GIN_MODE=debug
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - CORS_ALLOW_ORIGINS=*
      - SERVICE_PORT=:8080
      - SERVICE_NAME=publisher-service
      - ENVIRONMENT=dev
    volumes:
      - ./uploads:/app/uploads
      - ./compressed:/app/compressed
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  subscriber-service:
    build:
      context: ./subscriber-service
      dockerfile: Dockerfile
    container_name: image-processor-subscriber
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=image_processor
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./uploads:/app/uploads
      - ./compressed:/app/compressed
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  postgres-data:
  rabbitmq-data: